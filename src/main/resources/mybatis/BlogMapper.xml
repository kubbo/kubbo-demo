<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kubbo.demo.mybatis.BlogMapper">
    <!--定义独立的cache,要求 model 可以序列化,并且显示调用commit时才会将数据提交到cache中-->
    <!--<cache flushInterval="1000000"/>-->
    <select id="selectBlog" resultType="com.kubbo.demo.mybatis.Blog">
        select * from BLOG where id = #{id}
    </select>
    <select id="selectRecentBlog" resultType="com.kubbo.demo.mybatis.Blog" useCache="true">
        SELECT * FROM BLOG ORDER  BY id desc LIMIT 1
    </select>
    <select id="selectByCondition" resultType="com.kubbo.demo.mybatis.Blog">
        SELECT * FROM blog

        -- 用where 标签可以避免sql 语句的错误,AND OR 会根据条件自动去掉
        <where>
            <if test="id!=0">
                id = #{id}
            </if>

            <if test="title!=null">
                AND title = #{title}
            </if>

            <if test="content!=null">
                AND content = #{content}
            </if>
        </where>
    </select>
    <select id="selectBlogIn"  resultType="com.kubbo.demo.mybatis.Blog">
        SELECT * FROM blog
        <where>
            <if test="array!=null">
                id IN
                collection表示参数类型,array 或 list,item 表示每个元素
                <foreach collection="array" item="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>

    <delete id="deleteBlog">
        DELETE FROM BLOG WHERE id = #{id}
    </delete>

    <insert id="insertBlog" parameterType="blog" keyProperty="id" useGeneratedKeys="true">
        INSERT  INTO  blog (title,content,create_time,blog_type) VALUES (#{title},#{content},#{createTime},#{blogType})
    </insert>

    <update id="updateBlog" parameterType="blog">
        UPDATE blog SET title = #{title},
        content=#{content},
        blog_type=#{blogType},
        create_time= #{createTime}
        WHERE  id = #{id}
    </update>


    <!--用update 标签可以避免SQL错误-->
    <update id="updateField">
        UPDATE blog
        <set>
            <if test="title!=null">title =#{title},</if>
            <if test="content!=null">content =#{content},</if>
            <if test="blogType!=null">blog_type=#{blogType},</if>
            <if test="createTime!=null">create_time =#{createTime},</if>
        </set>
        WHERE id =#{id}
    </update>


    <resultMap id="blogDetail" type="blog">
        <id column="blog_id" property="id" />
        <result column="blog_title" property="title"/>
        <result column="blog_content" property="content"/>
        <result column="blog_create_time" property="createTime"/>
        <result column="blog_type" property="blogType"/>
        <!--相关属性的映射-->
        <association property="author" javaType="com.kubbo.demo.mybatis.Author">
            <id column="auth_id" property="id"/>
            <result column="author_username" property="username"/>
        </association>
        <!--相关属性的列表映射-->
        <collection property="posts" ofType="com.kubbo.demo.mybatis.Post">
            <id column="post_id" property="id"/>
            <result column="post_title" property="title"/>
            <result column="post_content" property="content"/>
        </collection>
    </resultMap>
    <select id="selectBlogDetail"  resultMap="blogDetail">
        SELECT blog.id AS blog_id,
        blog.title AS blog_title,
        blog.content AS blog_content,
        blog.create_time AS blog_create_time,
        blog.blog_type AS blog_type,
        author.id AS author_id,
        author.username AS author_username,
        post.id AS post_id,
        post.title AS post_title,
        post.content AS post_content
        FROM blog
        LEFT OUTER JOIN author ON blog.author_id = author.id
        LEFT OUTER JOIN post ON blog.id = post.blog_id
        where blog.id = #{id}
    </select>
</mapper>